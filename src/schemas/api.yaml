openapi: 3.0.1
info:
    title: Nix Binary Cache
    version: 1.0.0
    description: This is a specification for a Nix binary cache
servers:
    -
        url: 'https://nix-cache.s3.amazonaws.com'
        description: The raw S3 bucket to fetch the Nix binary cache info
    -
        url: 'https://cache.nixos.org/'
        description: The CDN fronted Nix binary cache
paths:
    '/log/{deriver}':
        get:
            parameters:
                -
                    example: bidkcs01mww363s4s7akdhbl6ws66b0z-ruby-2.7.3.drv
                    name: deriver
                    description: The full name of the deriver
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: >
                                    unpacking sources

                                    unpacking source archive
                                    /nix/store/x3ir0dv32r6603df7myx14s308sfsh0c-source

                                    source root is source

                                    patching sources

                                    applying patch
                                    /nix/store/073hhn64isdlfbsjyr0sw78gyr9g7llg-source/patches/ruby/2.7/head/railsexpress/01-fix-broken-tests-caused-by-ad.patch

                                    patching file spec/ruby/core/process/groups_spec.rb

                                    patching file spec/ruby/library/etc/getgrgid_spec.rb

                                    patching file spec/ruby/library/etc/struct_group_spec.rb

                                    patching file test/ruby/test_process.rb

                                    applying patch
                                    /nix/store/073hhn64isdlfbsjyr0sw78gyr9g7llg-source/patches/ruby/2.7/head/railsexpress/02-improve-gc-stats.pa
                    description: successful operation. This is usually compressed such as with brotli.
                '404':
                    description: Not found
                '501':
                    description: Operation not supported by the server.
            security:
                - {}
            operationId: getDeriverBuildLog
            summary: >-
                Get the build logs for a particular deriver. This path exists if this binary cache is hydrated
                from Hydra.
    '/{storePathHash}.ls':
        get:
            parameters:
                -
                    example: p4pclmv1gyja5kzc26npqpia1qqxrf0l
                    name: storePathHash
                    description: cryptographic hash of the store path
                    schema:
                        type: string
                    in: path
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FileListing'
                    description: successful operation
                '404':
                    description: Not found
                '501':
                    description: Not Implemented
            security:
                - {}
            operationId: getNarFileListing
            summary: Get the file listings for a particular store-path (once you expand the NAR).
    '/{storePathHash}.narinfo':
        get:
            responses:
                '200':
                    content:
                        text/x-nix-narinfo:
                            schema:
                                $ref: '#/components/schemas/NarInfo'
                    description: successful operation
                '404':
                    description: Not found
                '500':
                    description: Internal Server Error
            security:
                - {}
            operationId: getNarInfo
            summary: Get the NarInfo for a particular path
        put:
            requestBody:
                content:
                    application/x-nix-narinfo: {}
                required: true
            responses:
                '201':
                    description: file successfully written
                '500':
                    description: Internal Server Error
            security:
                -
                    BasicAuth: []
        head:
            responses:
                '200':
                    description: successful operation
                '404':
                    description: Not found
                '500':
                    description: Internal Server Error
            security:
                - {}
            operationId: doesNarInfoExist
            summary: Check if a particular path exists quickly
        parameters:
            -
                example: p4pclmv1gyja5kzc26npqpia1qqxrf0l
                name: storePathHash
                description: cryptographic hash of the store path
                schema:
                    type: string
                in: path
                required: true
    '/nar/{fileHash}.nar.{compression}':
        get:
            responses:
                '200':
                    content:
                        application/x-nix-nar:
                            schema:
                                format: binary
                                type: string
                    description: successful operation
                '404':
                    description: Not found
                '500':
                    description: Internal Server Errror
            security:
                - {}
            operationId: getCompressedNar
            summary: Get the compressed NAR object
        put:
            requestBody:
                content:
                    application/x-nix-nar: {}
                required: true
            responses:
                '201':
                    description: File sucessfully written
                '500':
                    description: Internal Server Error
            security:
                -
                    BasicAuth: []
            summary: Uploads a file
        head:
            responses:
                '200':
                    description: file exists
                '404':
                    description: file doesn't exists
                '500':
                    description: internal server error
            security:
                - {}
            summary: Checks if the file exists
        parameters:
            -
                example: 1w1fff338fvdw53sqgamddn1b2xgds473pv6y13gizdbqjv4i5p3
                name: fileHash
                description: The base32 cryptographic hash of the NAR.
                schema:
                    type: string
                in: path
                required: true
            -
                example: xz
                name: compression
                description: The compression algorithm listed in the NarInfo object
                schema:
                    enum:
                        - br
                        - bz2
                        - lzip
                        - lz4
                        - zst
                        - xz
                    type: string
                in: path
                required: true
    /nix-cache-info:
        get:
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NixCacheInfo'
                    description: successful operation
            security:
                - {}
            operationId: getNixCacheInfo
            summary: Get information about this Nix binary cache
components:
    schemas:
        NixCacheInfo:
            required:
                - StoreDir
                - WantMassQuery
                - Priority
            type: object
            properties:
                StoreDir:
                    description: >-
                        The path of the Nix store to which this binary cache applies. Binaries are not
                        relocatable — a binary built for /nix/store won’t generally work in /home/alice/store
                        — so to prevent binaries from being used in a wrong store, a binary cache is only used
                        if its StoreDir matches the local Nix configuration. The default is /nix/store.
                    type: string
                    example: /nix/store
                WantMassQuery:
                    description: >-
                        Query operations such as nix-env -qas can cause thousands of cache queries, and thus
                        thousands of HTTP requests, to determine which packages are available in binary form.
                        While these requests are small, not every server may appreciate a potential onslaught
                        of queries. If WantMassQuery is set to 0 (default), “mass queries” such as nix-env
                        -qas will skip this cache. Thus a package may appear not to have a binary substitute.
                        However, the binary will still be used when you actually install the package. If
                        WantMassQuery is set to 1, mass queries will use this cache.
                    type: integer
                Priority:
                    description: >-
                        Each binary cache has a priority (defaulting to 50). Binary caches are checked for
                        binaries in order of ascending priority; thus a higher number denotes a lower
                        priority. The binary cache https://cache.nixos.org has priority 40.
                    type: integer
        FileListingEntryType:
            enum:
                - directory
                - regular
            type: string
        FileListingDirectoryEntry:
            required:
                - type
                - entries
            type: object
            properties:
                type:
                    $ref: '#/components/schemas/FileListingEntryType'
                entries:
                    type: object
                    additionalProperties:
                        oneOf:
                            -
                                $ref: '#/components/schemas/FileListingFileEntry'
                            -
                                $ref: '#/components/schemas/FileListingDirectoryEntry'
        FileListingFileEntry:
            required:
                - type
                - size
                - narOffset
            type: object
            properties:
                type:
                    $ref: '#/components/schemas/FileListingEntryType'
                size:
                    description: The size of the file
                    type: integer
                narOffset:
                    description: The offset in bytes within the NAR
                    type: integer
                executable:
                    description: Whether this file should be made executable
                    type: boolean
        FileListing:
            type: object
            properties:
                version:
                    description: The version of this current format
                    type: integer
                root:
                    oneOf:
                        -
                            $ref: '#/components/schemas/FileListingDirectoryEntry'
                        -
                            $ref: '#/components/schemas/FileListingFileEntry'
        NarInfo:
            required:
                - StorePath
                - URL
                - FileHash
                - NarHash
                - FileSize
                - NarSize
                - Sig
                - References
            type: object
            properties:
                StorePath:
                    description: >-
                        The full store path, including the name part (e.g., glibc-2.7). It must match the
                        requested store path.
                    type: string
                    example: /nix/store/p4pclmv1gyja5kzc26npqpia1qqxrf0l-ruby-2.7.3
                URL:
                    description: 'The URL of the NAR, relative to the binary cache URL.'
                    type: string
                    example: nar/1w1fff338fvdw53sqgamddn1b2xgds473pv6y13gizdbqjv4i5p3.nar.xz
                Compression:
                    description: The compression method
                    enum:
                        - br
                        - bz2
                        - lzip
                        - lz4
                        - zst
                        - xz
                    type: string
                    example: xz
                FileHash:
                    description: The cryptographic hash of the file to download in base32
                    type: string
                    example: 'sha256:1w1fff338fvdw53sqgamddn1b2xgds473pv6y13gizdbqjv4i5p3'
                FileSize:
                    minimum: 0
                    type: integer
                NarHash:
                    description: The cryptographic hash of the NAR (decompressed) in base 32
                    type: string
                    example: 'sha256:1impfw8zdgisxkghq9a3q7cn7jb9zyzgxdydiamp8z2nlyyl0h5h'
                NarSize:
                    minimum: 0
                    type: integer
                Deriver:
                    description: 'The deriver of the store path, without the Nix store prefix. This field is optional.'
                    type: string
                    example: bidkcs01mww363s4s7akdhbl6ws66b0z-ruby-2.7.3.drv
                System:
                    description: 'The Nix platform type of this binary, if known. This field is optional.'
                    type: string
                    example: linux-x86-64
                References:
                    description: Store paths for direct runtime dependencies
                    type: array
                    items:
                        type: string
                    example: 0d71ygfwbmy1xjlbj1v027dfmy9cqavy-libffi-3.3
                Sig:
                    description: >-
                        A signature of the the form key-name:sig, where key-name is the symbolic name of the
                        key pair used to sign and verify the cache (e.g. cache.example.org-1), and sig is the
                        actual signature, computed over the StorePath, NarHash, NarSize and References fields
                        using the Ed25519 public-key signature system.
                    type: string
                    example: >-
                        cache.nixos.org-1:GrGV/Ls10TzoOaCnrcAqmPbKXFLLSBDeGNh5EQGKyuGA4K1wv1LcRVb6/sU+NAPK8lDiam8XcdJzUngmdhfTBQ==
    securitySchemes:
        BasicAuth:
            scheme: basic
            type: http
externalDocs:
    description: Find out more about Nix & NixOS
    url: 'http://nixos.org/'
